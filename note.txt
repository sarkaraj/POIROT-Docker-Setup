docker-machine ssh myvm1 "docker swarm init --advertise-addr 192.168.0.168:2376"


To add a worker to this swarm, run the following command:

docker-machine ssh myvm2 "docker swarm join --token SWMTKN-1-68jwhkro9ckvz7f8sjmtlarfcc041edoy0lffp79yg4c5fzslz-dpp4ff6sbr3x52sil8s273b3p 192.168.0.176:2377"

docker-machine ssh myvm2 "docker swarm join --token SWMTKN-1-68jwhkro9ckvz7f8sjmtlarfcc041edoy0lffp79yg4c5fzslz-dpp4ff6sbr3x52sil8s273b3p 192.168.0.168:2377"


docker-machine ssh myvm1 "docker stack deploy -c docker-compose.yml getstartedlab"


docker-machine scp docker-compose.yml myvm1:~


Docker - Get Started

###############################################

# Part 3: Application

###############################################

# to start docker swarm as the manager
docker swarm init

# # Example output
# Swarm initialized: current node (nr1amjh5n9l4h0u7ns7kvtu0j) is now a manager.

# To add a worker to this swarm, run the following command:

# docker swarm join --token SWMTKN-1-1xw233o53h53o8r9c1875qv2kdn4vc58ag8mtxkggczlu1wfoz-8xv87me8p9sbjce9qvvd2eqm3 192.168.65.3:2377

# To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.


# to deploy the docker image -- here 'getstartedlab' is the name of the app to be deployed
docker stack deploy -c docker-compose.yml getstartedlab


# to see the running services in docker
docker service ls

# Example output
# ID                  NAME                MODE                REPLICAS            IMAGE                        PORTS
# l7pw1g0ml5ar        getstartedlab_web   replicated          3/3                 sarkaraj/get-started:part2   *:80->80/tcp

# A single container running in a service is called a task. Tasks are given unique IDs that numerically increment, up to the number of replicas you defined in docker-compose.yml

# to see the containers running in the service getstartedlab_web
docker service ps getstartedlab_web

# # Example output
# ID                  NAME                  IMAGE                        NODE                    DESIRED STATE       CURRENT STATE           ERROR               PORTS
# ond29u8k9p35        getstartedlab_web.1   sarkaraj/get-started:part2   linuxkit-00155d003c01   Running             Running 3 minutes ago
# nyyjcqfzmhgm        getstartedlab_web.2   sarkaraj/get-started:part2   linuxkit-00155d003c01   Running             Running 3 minutes ago
# goph6bl1f3u0        getstartedlab_web.3   sarkaraj/get-started:part2   linuxkit-00155d003c01   Running             Running 3 minutes ago


# Tasks also show up if you just list all the containers on your system, though that is not filtered by service
docker container ls -q

# Take the app down with
docker stack rm getstartedlab

# Take down the swarm
docker swarm leave --force


###############################################

# Part 4: Swarm

###############################################

# A swarm is made up of multiple nodes, which can be either physical or virtual machines. The basic concept is simple enough: run docker swarm init to enable swarm mode and make your current machine a swarm manager, then run docker swarm join on other machines to have them join the swarm as workers.

# Now, create a couple of VMs using our node management tool, docker-machine:
# Pre-req: there exists a virtual switch connected to the machine's actual LAN names 'myswitch'

docker-machine create -d hyperv --hyperv-virtual-switch "myswitch" myvm1
docker-machine create -d hyperv --hyperv-virtual-switch "myswitch" myvm2


# LIST THE VMS AND GET THEIR IP ADDRESSES
docker-machine ls

# # Example output
# NAME    ACTIVE   DRIVER   STATE     URL                        SWARM   DOCKER        ERRORS
# myvm1   -        hyperv   Running   tcp://192.168.0.159:2376           v17.12.1-ce
# myvm2   -        hyperv   Running   tcp://192.168.0.153:2376           v17.12.1-ce


# INITIALIZE THE SWARM AND ADD NODES
# The first machine acts as the manager, which executes management commands and authenticates workers to join the swarm, and the second is a worker.

docker-machine ssh myvm1 "docker swarm init --advertise-addr 192.168.0.159:2377"

# # Example output
# Swarm initialized: current node (fsqynlr56f2zbxiete9fdt4fv) is now a manager.

# To add a worker to this swarm, run the following command:

    # docker swarm join --token SWMTKN-1-33yt0mwnf11bwuxa5ngwnf2pi2sjh8p8wnbw96nb7io9nj2gr8-addbckalac5chrlpws5lg5qsr 192.168.0.159:2377

# To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.


##############
# ::NOTE::
# Ports 2377 and 2376

# Always run docker swarm init and docker swarm join with port 2377 (the swarm management port), or no port at all and let it take the default.

# The machine IP addresses returned by docker-machine ls include port 2376, which is the Docker daemon port. Do not use this port or you may experience errors.
##############


# have myvm2 join your new swarm as a worker
docker-machine ssh myvm2 "docker swarm join --token SWMTKN-1-33yt0mwnf11bwuxa5ngwnf2pi2sjh8p8wnbw96nb7io9nj2gr8-addbckalac5chrlpws5lg5qsr 192.168.0.159:2377"

# # Example output
# This node joined a swarm as a worker.

# Run docker node ls on the manager to view the nodes in this swarm
docker-machine ssh myvm1 "docker node ls"

# # Example output
# ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
# fsqynlr56f2zbxiete9fdt4fv *   myvm1               Ready               Active              Leader
# 29b034y46vzmmrzuybk05bwfa     myvm2               Ready               Active             


##############
# ::NOTE::
# Leaving a swarm
# If you want to start over, you can run docker swarm leave from each node.
##############

##############
# ::NOTE::
# Only swarm managers like myvm1 execute Docker commands; workers are just for capacity
##############

# Run docker-machine env myvm1 to get the command to configure your shell to talk to myvm1
docker-machine env myvm1

# SET DOCKER_TLS_VERIFY=1
# SET DOCKER_HOST=tcp://192.168.0.159:2376
# SET DOCKER_CERT_PATH=C:\Users\Rajarshi Sarkar\.docker\machine\machines\myvm1
# SET DOCKER_MACHINE_NAME=myvm1
# SET COMPOSE_CONVERT_WINDOWS_PATHS=true
# REM Run this command to configure your shell:
# REM     @FOR /f "tokens=*" %i IN ('docker-machine env myvm1') DO @%i

@FOR /f "tokens=*" %i IN ('docker-machine env myvm1') DO @%i


# Run docker-machine ls to verify that myvm1 is the active machine as indicated by the asterisk next to it.
docker-machine ls


# Just like before, run the following command to deploy the app on myvm1.
docker stack deploy -c docker-compose.yml getstartedlab


# And that’s it, the app is deployed on a swarm cluster!

##############
# ::NOTE::
# If your image is stored on a private registry instead of Docker Hub, you need to be logged in using docker login <your-registry> and then you need to add the --with-registry-auth flag to the above command. For example:

# docker login registry.example.com

# docker stack deploy --with-registry-auth -c docker-compose.yml getstartedlab

# This passes the login token from your local client to the swarm nodes where the service is deployed, using the encrypted WAL logs. With this information, the nodes are able to log into the registry and pull the image.
##############

# Run docker-machine ls to get your VMs’ IP addresses
docker-machine ls

##############
# ::NOTE::
# Keep the swarm or remove it?

# At some point later, you can remove this swarm if you want to with docker-machine ssh myvm2 "docker swarm leave" on the worker and docker-machine ssh myvm1 "docker swarm leave --force" on the manager
##############

# Unsetting docker-machine shell variable settings
docker-machine env -u

# # Example output
# SET DOCKER_TLS_VERIFY=
# SET DOCKER_HOST=
# SET DOCKER_CERT_PATH=
# SET DOCKER_MACHINE_NAME=
# REM Run this command to configure your shell:
# REM     @FOR /f "tokens=*" %i IN ('docker-machine env -u') DO @%i

@FOR /f "tokens=*" %i IN ('docker-machine env -u') DO @%i



# To restart a machine that’s stopped, run:
docker-machine start <machine-name>

# # Example
# docker-machine start myvm1



###############################################

# Part 5: Stack

###############################################

# A stack is a group of interrelated services that share dependencies, and can be orchestrated and scaled together. A single stack is capable of defining and coordinating the functionality of an entire application (though very complex applications may want to use multiple stacks).

# To see a list of stopped containers
docker ps --filter "status=exited"


# RESOURCES
# https://github.com/docker/labs/blob/master/beginner/chapters/webapps.md
# https://docs.docker.com/samples/